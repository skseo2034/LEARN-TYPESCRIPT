///참조. 타입스크립트 공식문서 사이트 typescriptlang.org
   tool > TSConfig Reference 보면 설정 볼수 있음.


/// 타입스크립트 프로젝트시작하는 방법(라이브러리 설치와 tsc)
///
-. 컴파일(compile) : ts 파일을 js 파일로 변환하는 작업
-. 컴파일 하기 위해 node 설치 확인 : node -v
-. typescript 설치(global로 설치) : npm i typescript -g
   => tsc 라는  typescript 명령어를 실행하기 위해 npm 을 이용하여 typescript 라이브러리를 local system에 system 레벨에 설치 하는 것.
-. tsc index.ts 명령어로 typescript 파일을 컴파일하여 javascript 파일로 변환 하겠다.

/// 타입스크립트 설정 파일
///
-. 참조.
   타입스크립트 설정 파일 옵션(문서) https://www.typescriptlang.org/docs/handbook/compiler-options.html
-. tsc 로 컴파일 할때 부가적으로 옵션들을 줄수가 있는데. 그 옵션들을 정의한 파일이 tsconfig.json 이다.
   {} 안에 key-value 형태로 정의하면 된다.
   => noImplicitAny: true 는 타입이 any 라도 명시적으로 적어 달라는 표시 sum(a:any, b:any) 이런식임. false 이면 any로 간주한다.
-. 타입스크립트 플레이그라운드 사이트 : https://www.typescriptlang.org/play
    => 간단하게 ts 코드를 js코드로 변환 해 볼 수 있다.

-. 바벨 사이트 : https://babeljs.io/
   바벨(Babel)은 javascript 라고하는 최신 문법을 최대한 많은 브라우져가 볼수 있게 변환해 주는 도구

/// 타입스크립트 변수 타입스크립트
-. 참조 : https://joshua1988.github.io/ts/guide/basic-types.html
-. 참조 : let 와 const 안내 - https://joshua1988.github.io/es6-online-book/const-let.html

/// 타입스크립트 타입 함수
-. 참조 : https://joshua1988.github.io/ts/guide/functions.html

/// nodejs 패키지 효율 적 인 업그레이드 플러그 인 npm - check - updates
-. 설치 npm install -g npm-check-updates
-. 사용법
    ncu를 CLI로 입력을 하면 실제 package.json이 업데이트가 되는 것이 아니라 업데이트 되는 항목을 보여줍니다.
    ncu -u를 CLI로 입력을 하면 package.json의 dependencies와 devDependencies에 있는 각 패키지들이 최신버전으로 변경이 됩니다. 
    이때 실제로 node_modules폴더에 패키지가 변경되는 것이 아니므로 npm install을 실행해서 실제로 패키지를 변경해 주면 됩니다.
    $ ncu -u
    $ npm install 
    출처: https://stories.tistory.com/271 [나만모르는 이야기]

/// 기존 JS 파일을 TS로 변경할때 먼저 any 타입으로 하고(tsconfig.json 에 "noImplicitAny": true 설정)
    하나하나 구체적으로 타입을 정의 해 나가면 된다.

/// type vs interface
     타입 별칭과 인터페이스의 가장 큰 차이점은 타입의 확장 가능 / 불가능 여부입니다. 
     인터페이스는 확장이 가능한데 반해 타입 별칭은 확장이 불가능합니다.
     따라서, 가능한한 type 보다는 interface로 선언해서 사용하는 것을 추천합니다.    

/// MDN 자바스크립트 프로토타입과 상속 참조 : https://developer.mozilla.org/ko/docs/Web/JavaScript/Inheritance_and_the_prototype_chain 언어 한국어로 변경해서 보면 됨.

/// javascript object 참조 : 구글 object mdn 검색

/// 자바스크립트 비동기 처리와 콜백 함수 : https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/

/// 자바스크립트 Promise 쉽게 이해하기 : https://joshua1988.github.io/web-development/javascript/promise-for-beginners/

/// 자바스크립트 async와 await : https://joshua1988.github.io/web-development/javascript/js-async-await/

/// MDN Array map() API 문서 : https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/map

/// Best Common Type : Typescript 가 해당 타입을 어떤 타입인지? 매겨나가는 알고리즘 이다.

/// VSCode 타입스크립트 소개 문서 : https://code.visualstudio.com/docs/languages/typescript#_code-suggestions

/// VSCode Language Server Extension 가이드 : https://code.visualstudio.com/api/language-extensions/language-server-extension-guide

/// Language Server 소개 사이트 : https://langserver.org/

// Language Server Protocol 개요 : https://docs.microsoft.com/ko-kr/visualstudio/extensibility/language-server-protocol?view=vs-2019

// ES6 Modules : https://joshua1988.github.io/vue-camp/es6+/modules.html

// 자바스크립트 모듈화 역사 : https://d2.naver.com/helloworld/12864

// 입스크립트 공식 사이트의 유틸리티 타입 문서 : https://www.typescriptlang.org/docs/handbook/utility-types.html

// JS에 TS 적용하기 : https://joshua1988.github.io/ts/etc/convert-js-to-ts.html

// Fetch API 설명 및 지원 브라우져 확인 : https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API

// 실전 프로젝트 : project 폴더 > README.md 참조

// 마크다운 참조 : https://namu.wiki/w/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4  https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet

// es6 참조 : https://joshua1988.github.io/vue-camp/textbook.html

// 화살표함수 MDN 문서 : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions